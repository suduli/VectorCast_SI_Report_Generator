import os
import re
import sys

# Constants
REGEX_PATTERN = r"ENVIRO.STUB_BY_FUNCTION:.(\w.+)"
REPLACE_PATTERN = r"ENVIRO.STUB_BY_FUNCTION: "

def create_folder(path, folder_name):
    """Create a folder and return its path."""
    folder = os.path.join(path, folder_name)
    if not os.path.isdir(folder):
        os.mkdir(folder)
    return folder

def generate_report_path(main_path, unit_name, end_type):
    """Generate report path based on unit name and type."""
    report_path = os.path.join(main_path, unit_name + end_type)
    if report_path.endswith('.html'):
        report_path = f'"{report_path}"'
    return report_path

def extract_strings_from_env(env_name):
    """Extract specific strings from the environment file."""
    with open(env_name, 'r', encoding='UTF-8') as f:
        content = f.read()
    matches = re.findall(REGEX_PATTERN, content, re.MULTILINE | re.IGNORECASE)
    return [re.sub(REPLACE_PATTERN, "", match) for match in matches]

def main():
    user_input = input("Do you want Compound Test Cases:\n1.YES\n2.NO\n input number\n")
    try:
        user_input = int(user_input)
        if user_input not in [1, 2]:
            raise ValueError
    except ValueError:
        print("Invalid input. Please enter 1 or 2.")
        return

    current_dir = sys.path[0]
    unit_name = os.path.basename(current_dir)
    capital_env = unit_name.upper()

    # Create necessary folders for reports
    report_folder_path = create_folder(current_dir, unit_name + "_VCAST_SI_Results")
    html_path = create_folder(report_folder_path, "Html&Tst's")
    unit_folder = create_folder(html_path, "Unit_Tst's")

    # Extract specific strings from the environment file
    env_name = capital_env + ".env"
    extracted_strings = extract_strings_from_env(env_name)

    # Generate paths for different report types
    full_report_path = generate_report_path(html_path, unit_name, "_Full_Report.html")
    mgn_report_path = generate_report_path(html_path, unit_name, "_Testcase_Management_Report.html")
    mtr_report_path = generate_report_path(html_path, unit_name, "_Metrics_Report.html")
    full_tst_path = os.path.join(html_path, capital_env + ".tst")
    compound_path = os.path.join(unit_folder, "__COMPOUND__.tst")

    # Run system commands to generate reports and test scripts
    os.system(f'%VECTORCAST_DIR%\clicast -lc -e {capital_env} REports Custom FULl {full_report_path}')
    os.system(f'%VECTORCAST_DIR%\clicast -lc -e {capital_env} Reports Custom MAnagement {mgn_report_path}')
    os.system(f'%VECTORCAST_DIR%\clicast -lc -e {capital_env} Reports Custom MEtrics {mtr_report_path}')
    os.system(f'%VECTORCAST_DIR%\clicast -lc -e {capital_env} TESt Script CReate "{full_tst_path}"')
    if user_input == 1:
        os.system(f'%VECTORCAST_DIR%\clicast -lc -e {capital_env} -s "<<COMPOUND>>" TESt Script CReate "{compound_path}"')
    for string in extracted_strings:
        file_tst_path = os.path.join(unit_folder, string + ".tst")
        os.system(f'%VECTORCAST_DIR%\clicast -e {capital_env} -u {string} TESt Script CReate "{file_tst_path}"')

if __name__ == "__main__":
    main()
